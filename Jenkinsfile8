pipeline {
  agent any

  parameters {
    choice(
      name: 'ENV',
      choices: ['dev', 'staging', 'prod'],
      description: 'Select environment for deployment'
    )
  }

  stages {
    stage('Build') {
      steps {
        echo 'Building application...'
        // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ fail: sh 'exit 1'
      }
    }

    stage('Unit Tests') {
      // Unit Tests ‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏Å‡πá‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠ Build ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      when {
        expression { currentBuild.currentResult == 'SUCCESS' }
      }
      steps {
        echo 'Running unit tests...'
      }
    }

    stage('Test in Parallel') {
      parallel {
        stage('Linux Tests') {
          steps {
            echo 'Simulating tests on Linux üêß'
          }
        }
        stage('Windows Tests') {
          steps {
            echo 'Simulating tests on Windows ü™ü'
          }
        }
      }
    }

    stage('Approval') {
      steps {
        script {
          timeout(time: 2, unit: 'MINUTES') {
            input message: "Do you want to proceed with deployment to ${params.ENV}?"
          }
        }
      }
    }

    stage('Deploy') {
      steps {
        echo "üöÄ Deploying application to ${params.ENV} environment..."
      }
    }
  }

  post {
    success { echo '‚úÖ Pipeline finished successfully!' }
    failure { echo '‚ùå Pipeline failed. Check logs!' }
    always  { echo 'Pipeline completed (success or failure).' }
  }
}
